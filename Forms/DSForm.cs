using DevExpress.XtraEditors;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using OrderManagerEF.Data;
using OrderManagerEF.Classes;
using System.Net.Http;
using DevExpress.Data.Filtering;
using DevExpress.Data;
using DevExpress.XtraBars.Ribbon;
using DevExpress.XtraBars;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraReports.UI;
using DevExpress.XtraSplashScreen;
using OrderManagerEF.DTOs;
using Microsoft.Data.SqlClient;
using DevExpress.XtraGrid.Views.Grid;
using System.IO;
using Newtonsoft.Json.Linq;
using OrderManagerEF.Entities;

namespace OrderManagerEF.Forms
{
    public partial class DSForm : RibbonForm
    {
        private readonly ExcelExporter _excelExporter;
        private readonly BulkReportGenerator _reportGenerator;
        private FileExistenceGridViewHelper _fileExistenceGridViewHelper;
        private bool _dataLoaded;
        private HttpClient client;
        private readonly ApiKeyManager _apiKeyManager;
        private readonly string _location = "DS"; // Define your location
        private IConfiguration _configuration;
        private readonly ReportManager _reportManager;
        private readonly PickSlipGenerator _pickSlipGenerator;
        private OMDbContext _context;
        private readonly StoredProcedureService _storedProcedureService;
        private readonly UserSession _userSession;
        public DSForm(IConfiguration configuration, OMDbContext context, UserSession userSession)
        {
            InitializeComponent();
            _configuration = configuration;
            _context = context;
            _userSession = userSession;
            _excelExporter = new ExcelExporter(gridView1);
            // This line of code is generated by Data Source Configuration Wizard


            _reportGenerator = new BulkReportGenerator(configuration);

            VisibleChanged += DS_VisibleChanged;

            var connectionString = configuration.GetConnectionString("RubiesConnectionString");

            _apiKeyManager = new ApiKeyManager(connectionString);

            SetUpHttpClient(_location);

            _reportManager = new ReportManager(configuration);
            _pickSlipGenerator = new PickSlipGenerator(configuration, context);

            BarButtonClicks();

        }



        private void BarButtonClicks()
        {   //Export to Excel
            barButtonItem1.ItemClick += barButtonItem1_ItemClick;
            //Sync IDs
            barButtonItem2.ItemClick += barButtonItem2_ItemClick;
            //Show IDS
            barButtonItem3.ItemClick += barButtonItem3_ItemClick;
            //Create Batch
            barButtonItem4.ItemClick += barButtonItem4_ItemClick;
            //Show Batch
            barButtonItem5.ItemClick += barButtonItem5_ItemClick;
            //Process Batch
            barButtonItem6.ItemClick += barButtonItem6_ItemClick;
            //Sort By BinNumber
            barButtonItem7.ItemClick += barButtonItem7_ItemClick;
            //Hold Order
            barButtonItem8.ItemClick += barButtonItem8_ItemClick;
            //Show Ready Orders
            barButtonItem9.ItemClick += barButtonItem9_ItemClick;
            //Show Duplicates
            barButtonItem10.ItemClick += barButtonItem10_ItemClick;
            //Select and Process
            barButtonItem11.ItemClick += barButtonItem11_ItemClick;
        }

        private void DS_VisibleChanged(object sender, EventArgs e)
        {
            if (Visible && !_dataLoaded)
            {
                LoadData();
                _dataLoaded = true;
            }
        }



        private void LoadData()
        {
            // Show the default splash screen
            SplashScreenManager.ShowDefaultWaitForm("Please wait", "Loading data...");

            try
            {
                var data = _context.DSOrderDatas.ToList();

                // Update the FileStatus property for each item in the data list.
                UpdateFileStatusForData(data);

                // Create the new FileExistenceGridView
                var newView = new FileExistenceGridView(_configuration)
                {
                    FileLocationColumnNames = { "LabelFile", "PickSlipFile" },
                    FilterFileExists = false
                };

                // Set the new view as the main view BEFORE setting data
                gridControl1.MainView = newView;

                // Now set the data source
                gridControl1.DataSource = data;
                newView.RefreshData();

                // Apply additional configurations
                AddPreviewLinkColumn(newView);
                HighlightDuplicateRows(newView);

                // Apply shipping method grouping with color coding
                try
                {
                    newView.GroupByShippingMethod();
                }
                catch (InvalidOperationException ex)
                {
                    // Show a warning to the user using XtraMessageBox
                    XtraMessageBox.Show($"Note: Shipping method grouping not available - {ex.Message}",
                        "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

                // Initialize helpers and event handlers
                _fileExistenceGridViewHelper = InitializeFileExistenceHelper(newView);
                newView.KeyDown += gridView1_KeyDown;
                InitSoHyperLink();

                // Enable dynamic group row coloring (for the "ZShipping Method: 7C55" rows)
                newView.EnableDynamicGroupRowColoring();

                // Set focus to gridControl1
                gridControl1.Focus();
            }
            finally
            {
                // Close the splash screen once data is loaded
                SplashScreenManager.CloseForm(false);
            }
        }

        private void InitSoHyperLink()
        {
            var repositoryItemHyperLinkEdit1 = new RepositoryItemHyperLinkEdit();

            repositoryItemHyperLinkEdit1.OpenLink += (sender, e) =>
            {
                var hyperlink = sender as HyperLinkEdit;
                if (hyperlink != null && !string.IsNullOrEmpty(hyperlink.EditValue?.ToString()))
                {
                    var OrderRef = hyperlink.EditValue.ToString();

                    // Run your operation
                    var detailForm = new OrderLookupForm(_configuration, _context, OrderRef);
                    detailForm.Show();
                    e.Handled = true; // Mark event as handled
                }
            };

            var gridView = gridControl1.MainView as FileExistenceGridView;
            if (gridView != null)
            {
                gridView.Columns["AccountingRef"].ColumnEdit = repositoryItemHyperLinkEdit1;
            }
        }

        private void UpdateFileStatusForData(List<DSOrderData> data)
        {
            foreach (var item in data)
            {
                item.FileStatus = CustomTextConverter.Convert(item.LabelFile);
            }
        }
        private FileExistenceGridViewHelper InitializeFileExistenceHelper(FileExistenceGridView gridView)
        {
            var fileExistenceGridViewHelper = new FileExistenceGridViewHelper(gridView);
            return fileExistenceGridViewHelper;
        }

        private DataTable AddFileStatusColumn(DataTable originalTable)
        {
            var newTable = originalTable.Copy();
            newTable.Columns.Add("FileStatus", typeof(string));

            foreach (DataRow row in newTable.Rows)
            {
                var filePath = row["LabelFile"].ToString();
                row["FileStatus"] = CustomTextConverter.Convert(filePath);
            }

            return newTable;
        }


        private void gridView1_CustomUnboundColumnData(object sender, CustomColumnDataEventArgs e)
        {
            var gridView = sender as FileExistenceGridView;
            if (gridView == null) return;

            if (e.Column.FieldName == "TickCrossColumn" && e.IsGetData)
            {
                // Get the AccountingRef value from the current row
                var accountingRef = gridView.GetListSourceRowCellValue(e.ListSourceRowIndex, "AccountingRef")
                    .ToString();
                // Check if the AccountingRef value exists in the database table
                var isValueFound = CheckValueInDatabase(accountingRef);

                // Set the cell value to a tick or a cross based on the result
                e.Value = isValueFound ? "✓" : "✗";
            }
        }

        private bool CheckValueInDatabase(string accountingRef)
        {
            var isValueFound = false;

            // Set your database connection string
            var connectionString = _configuration.GetConnectionString("RubiesConnectionString");

            // Replace "YourTable" with the name of your database table
            // Replace "YourAccountingRefColumn" with the name of the column containing the AccountingRef values
            var query = "SELECT COUNT(*) FROM LabelstoPrintDS WHERE [SalesOrder] = @AccountingRef";

            using (var connection = new SqlConnection(connectionString))
            {
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@AccountingRef", accountingRef);

                    try
                    {
                        connection.Open();
                        var count = (int)command.ExecuteScalar();

                        // If count is greater than 0, it means the value exists in the database
                        isValueFound = count > 0;
                    }
                    catch (Exception ex)
                    {
                        // Handle any exceptions that may occur
                        XtraMessageBox.Show($"Error {ex.Message}");
                    }
                }
            }

            return isValueFound;
        }

        private void FilterDuplicateRows(FileExistenceGridView gridView)
        {
            var highlighter = new DuplicateRowHighlighter();
            highlighter.HighlightDuplicates(gridView);

            highlighter.FilterDuplicates(gridView);
        }


        private void HighlightDuplicateRows(FileExistenceGridView gridView)
        {
            var highlighter = new DuplicateRowHighlighter();
            highlighter.HighlightDuplicates(gridView);
        }


        private void barButtonItem1_ItemClick(object sender, ItemClickEventArgs e)
        {
            _excelExporter.ExportToXls();
        }


        private void barButtonItem11_ItemClick(object sender, ItemClickEventArgs e)
        {
            var gridView = gridControl1.FocusedView as FileExistenceGridView;


            if (gridView.SelectedRowsCount == 0)
            {
                XtraMessageBox.Show("Please select one or more rows to generate reports.");
                return;
            }


            // Call the method from ReportManager to show a warning if the path is not empty
            _reportManager.ShowWarningIfPathNotEmpty();

            if (gridView.SelectedRowsCount > 100)
            {
                var result =
                    XtraMessageBox.Show("You have selected more than 100 rows. Are you sure you want to continue?",
                        "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.No) return;
            }

            //Check Label File Exists
            foreach (var rowHandle in gridView.GetSelectedRows())
            {
                var filePath = gridView.GetRowCellValue(rowHandle, "LabelFile").ToString();
                if (!File.Exists(filePath))
                {
                    var result =
                        XtraMessageBox.Show(
                            "The label file does not exist for one or more selected rows. Do you want to continue processing?",
                            "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                    if (result == DialogResult.No) return; // Exit the method to prevent processing

                    {
                        break; // Break out of the loop and continue processing
                    }
                }
            }


            var selectedRowHandles = gridView.GetSelectedRows();
            var salesOrderReferences = new List<string>();

            foreach (var rowHandle in selectedRowHandles)
            {
                var salesOrderReference = gridView.GetRowCellValue(rowHandle, "AccountingRef").ToString();
                salesOrderReferences.Add(salesOrderReference);
            }

            // Ensure the splash screen is closed
            SplashScreenUtility.CloseSplashScreenIfNeeded();

            // Show the custom splash screen
            SplashScreenManager.ShowForm(typeof(ProgressForm));

            _reportGenerator.GenerateAndSaveReportsProgressPath(salesOrderReferences,
                progress => SplashScreenManager.Default.SendCommand(ProgressForm.SplashScreenCommand.SetProgress, progress),
                errorMessage => SplashScreenManager.Default.SendCommand(ProgressForm.SplashScreenCommand.SetMessage, errorMessage)
            );

            // Ensure the splash screen is closed
            SplashScreenUtility.CloseSplashScreenIfNeeded();


            var defaultPrinterName = PrinterHelperEF.GetUserPrinter(_context, _userSession.CurrentUser.Id);


            // Call the ExecuteDefaultPrinter method and pass in the default printer name
            var programPath = "C:\\Program Files (x86)\\2Printer\\2Printer.exe";
            var printerProgram = new PrinterProgram(programPath, _configuration);
            printerProgram.ExecuteDefaultPrinter(defaultPrinterName);


            /// Read the EnablePrintLog key value from appsettings.json or other configuration source
            bool usePrintLog = bool.Parse(_configuration["EnablePrintLog"]);
            // Parses the string to a boolean. Assumes that "EnablePrintLog" exists and its value is either "true" or "false".

            // If EnablePrintLog is true, then log the user activity
            if (usePrintLog)
            {
                // Loop through each sales order reference
                foreach (var salesOrderReference in salesOrderReferences)
                {
                    // Create a new user activity instance with required properties
                    UserActivity userActivity = new UserActivity
                    {
                        ActivityDescription = $"User {_userSession.CurrentUser.Username} printed pickslip with AccountingRef: {salesOrderReference} to {defaultPrinterName}",
                        Timestamp = DateTime.Now,
                        UserId = _userSession.CurrentUser.Id
                    };

                    // Add the user activity to the Entity Framework context
                    _context.UserActivities.Add(userActivity);
                }

                // Commit changes to the database
                _context.SaveChanges();
            }


            // Show a message box indicating all reports were saved
            XtraMessageBox.Show($"{salesOrderReferences.Count} reports were saved successfully.");


            // Refresh the GridView
            // Fetch the updated data from the database using the new EF Core method
            var data = _context.DSOrderDatas.ToList();

            // Set the fetched data as the grid's data source and refresh the grid view
            gridView.GridControl.DataSource = data;
            gridView.RefreshData();

        }

        private void barButtonItem10_ItemClick(object sender, ItemClickEventArgs e)
        {
            FilterDuplicateRows((FileExistenceGridView)gridControl1.MainView);
        }

        private void gridView1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.A)
            {
                gridView1.SelectAll();
                e.Handled = true; // optional: prevents other handlers from receiving this event
            }
        }

        private void AddPreviewLinkColumn(GridView gridView)
        {
            // Part 1: Add a new column and specify the column editor
            var column = gridView.Columns.AddField("PreviewLink");
            column.VisibleIndex = gridView.Columns.Count;
            column.UnboundType = UnboundColumnType.String;

            var hyperlink = new RepositoryItemHyperLinkEdit();
            hyperlink.OpenLink += Hyperlink_OpenLink;
            column.ColumnEdit = hyperlink;
            column.Caption = "PickSlip Preview";

            // Populate column with some data
            column.UnboundExpression = "'Preview'";
        }


        private void Hyperlink_OpenLink(object sender, OpenLinkEventArgs e)
        {
            Action<string> errorCallback = (errorMessage) =>
            {
                // Show the XtraMessageBox if an error occurs
                XtraMessageBox.Show(errorMessage, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            };

            var gridView = gridControl1.MainView as GridView;
            if (gridView != null)
            {
                var salesOrderReference = gridView.GetFocusedRowCellValue("AccountingRef").ToString();

                // Create an instance of BulkReportGenerator
                var reportGenerator = new BulkReportGenerator(_configuration);

                // Call the GenerateReportPortrait method
                var report = reportGenerator.GenerateReportPortrait(salesOrderReference, errorCallback);

                // Check if the report is not null (i.e., data was found)
                if (report != null)
                {
                    var printTool = new ReportPrintTool(report);
                    printTool.ShowPreviewDialog();
                }
            }

            // Prevent the link from being opened in a browser or another default action
            e.Handled = true;
        }

        //Create Batch
        private void barButtonItem4_ItemClick(object sender, ItemClickEventArgs e)
        {
            var tableName = "LabelstoPrintDS";
            var manager = new LabelQueueManager(tableName, _configuration);

            if (manager.ConfirmTruncate())
            {
                manager.TruncateTable();

                var gridView = gridControl1.FocusedView as FileExistenceGridView;

                var columnMappings = new Dictionary<string, string>
                {
                    { "AccountingRef", "SalesOrder" },
                    { "TradingRef", "OrderNumber" },
                    { "CustomerCode", "CustomerCode" },
                    { "EntryDateTime", "Date" }
                };

                string[] parameterNames = { "@column1", "@column2", "@column3", "@column4" };


                if (!CheckZShipmentID(gridView))
                    if (XtraMessageBox.Show(
                            "This record does not have a ShipmentID and will not generate a label. Are you sure you wish to continue?",
                            "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) != DialogResult.Yes)
                        return;

                manager.InsertData(gridView, columnMappings, parameterNames);

                var rowCount = gridView.GetSelectedRows().Length;
                manager.ShowRowCountMessage(rowCount);
            }

            manager.CloseConnection();
        }

    


        //Show Batch Form
        private void barButtonItem5_ItemClick(object sender, ItemClickEventArgs e)
        {
            var newForm = new BatchForm(_configuration, _context);
            newForm.Show();
        }


        //Process Batch
        private void barButtonItem6_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                // create an SQL connection
                var connectionString = _configuration.GetConnectionString("RubiesConnectionString");

                // Assuming you have a connection string called "connectionString" and a table called "myTable"
                using (var conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    var sql = "SELECT COUNT(*) FROM LabelstoPrintDS";
                    var cmd = new SqlCommand(sql, conn);
                    var rowCount = (int)cmd.ExecuteScalar();

                    if (rowCount > 0)
                    {
                        // Show a message box asking the user if they want to continue
                        var result = XtraMessageBox.Show(
                            "Are you sure you want to run the job and download " + rowCount + " labels ?",
                            "Confirm Job Run", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                        // If the user clicks Yes, continue with the operation
                        if (result == DialogResult.Yes)
                        {
                            var jobRunner = new SqlAgentJobRunner("HVSERVER02\\ABM", "msdb", "LabelPrintDS");
                            jobRunner.RunJob();
                            // Show the row count in a message box
                            XtraMessageBox.Show("Job started successfully! Number of labels queued " + rowCount);
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Warning: The DS Queue does not contain any rows!");
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"Error starting job: {ex.Message}");
            }
        }



        private bool CheckZShipmentID(FileExistenceGridView gridView)
        {
            // Assuming ZshipmentID is the column name
            var zShipmentIDColumnName = "ZShipmentID";

            var allRowsHaveShipmentID = true;

            foreach (var rowHandle in gridView.GetSelectedRows())
            {
                var zShipmentIDValue = gridView.GetRowCellValue(rowHandle, zShipmentIDColumnName)?.ToString();

                if (string.IsNullOrEmpty(zShipmentIDValue) || zShipmentIDValue.Trim().Length == 0)
                {
                    allRowsHaveShipmentID = false;
                    break;
                }
            }

            return allRowsHaveShipmentID;
        }


        private void barButtonItem9_ItemClick(object sender, ItemClickEventArgs e)
        {
            var gridView = gridControl1.FocusedView as FileExistenceGridView;

            if (gridView != null) gridView.ToggleFileExistenceFilter();
        }

        private void FilterZShipmentID(FileExistenceGridView gridView)
        {
            // Assuming ZShipmentID is in the first cell, change 0 to the correct cell index if needed
            var zShipmentIDColumnIndex = 0;
            var zShipmentIDColumn = gridView.Columns[zShipmentIDColumnIndex];

            if (gridView.ActiveFilterString.Contains("Not(IsNullOrEmpty([ZShipmentID]))"))
            {
                gridView.ActiveFilterCriteria = null;
                gridView.ActiveFilterString = string.Empty;
            }
            else
            {
                gridView.ActiveFilterCriteria = new NotOperator(
                    new FunctionOperator(FunctionOperatorType.IsNullOrEmpty,
                        new OperandProperty(zShipmentIDColumn.FieldName)));
                gridView.ActiveFilterString = "Not(IsNullOrEmpty([ZShipmentID]))";
            }

            gridView.RefreshData();
        }


        private void barButtonItem3_ItemClick(object sender, ItemClickEventArgs e)
        {
            var gridView = gridControl1.FocusedView as FileExistenceGridView;

            if (gridView != null) FilterZShipmentID(gridView);
        }

        private async void barButtonItem2_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                // Sync and update orders
                await SyncAndUpdateOrders();

                // Refresh the GridView
                var gridView = gridControl1.FocusedView as GridView;

                // Fetch the updated data from the database using the new EF Core method
                var data = _context.DSOrderDatas.ToList();

                // Set the fetched data as the grid's data source and refresh the grid view
                gridView.GridControl.DataSource = data;
                gridView.RefreshData();


                XtraMessageBox.Show("Sync and update operation was a success!", "Success", MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                // Log error
                XtraMessageBox.Show($"An error occurred during the sync and update operation: {ex.Message}", "Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }


        private void SetUpHttpClient(string location)
        {
            var (starshipItApiKey, ocpApimSubscriptionKey) = _apiKeyManager.GetApiKeysByLocation(location);


            client = new HttpClient();
            client.DefaultRequestHeaders.Add("StarShipIT-Api-Key", starshipItApiKey);
            client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", ocpApimSubscriptionKey);
        }


        public async Task SyncAndUpdateOrders()
        {
            int page = 1;
            int limit = 250;
            string sinceOrderDate = Uri.EscapeDataString(DateTime.UtcNow.AddDays(-7).ToString("yyyy-MM-dd'T'HH:mm:ss.FFF'Z'"));

            // Create an instance of ApiRequestHelper
            ApiRequestHelper apiRequestHelper = new ApiRequestHelper();

            while (true)
            {
                try
                {
                    // Define a function to create the HttpRequestMessage
                    Func<HttpRequestMessage> createRequest = () =>
                    {
                        var request = new HttpRequestMessage(HttpMethod.Get, $"https://api.starshipit.com/api/orders/unshipped?limit={limit}&page={page}&since_order_date={sinceOrderDate}");
                        return request;
                    };

                    // Use the ApiRequestHelper to send the request with exponential backoff handling
                    var response = await apiRequestHelper.SendRequestWithExponentialBackoff(client, createRequest);
                    var responseString = await response.Content.ReadAsStringAsync();
                    var orders = JObject.Parse(responseString)["orders"];

                    using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("RubiesConnectionString")))
                    {
                        connection.Open();
                        foreach (var order in orders)
                        {
                            if (order["order_id"] != null && order["order_number"] != null)
                            {
                                string orderId = (string)order["order_id"];
                                string orderNumber = (string)order["order_number"];
                                using (SqlCommand cmdTransHeader = new SqlCommand("ASP_ShipmentIDSync", connection))
                                {
                                    cmdTransHeader.CommandType = CommandType.StoredProcedure;
                                    cmdTransHeader.Parameters.AddWithValue("@OrderID", orderId);
                                    cmdTransHeader.Parameters.AddWithValue("@OrderNumber", orderNumber);
                                    cmdTransHeader.ExecuteNonQuery();
                                }
                            }
                        }

                        // Check if orders are still available for the next page
                        if (orders.Count() < limit)
                            break;

                        page++;  // Move to the next page
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show("Error: " + ex.Message);
                    if (ex.InnerException != null)
                    {
                        XtraMessageBox.Show("Inner Exception: " + ex.InnerException.Message);
                    }
                    break;
                }
            }
        }


        private void barButtonItem7_ItemClick(object sender, ItemClickEventArgs e)
        {
            // Show the SplashScreen
            SplashScreenManager.ShowDefaultWaitForm();
            try
            {
                // Call the stored procedure
                UpdateBinSortDS();

                // Refresh the GridView
                var gridView = gridControl1.FocusedView as GridView;

                // Refresh the GridView
                // Fetch the updated data from the database using the new EF Core method
                var data = _context.DSOrderDatas.ToList();

                // Set the fetched data as the grid's data source and refresh the grid view
                gridView.GridControl.DataSource = data;
                gridView.RefreshData();

            }

            finally
            {
                // If SplashScreen was shown, close it
                if (SplashScreenManager.Default != null)
                {
                    SplashScreenManager.CloseForm(false);
                }
            }

            // Show a message box indicating all reports were saved
            XtraMessageBox.Show("Operation was successful. Sorting by BinNumber has been completed.");

        }

        private void UpdateBinSortDS()
        {
            using (var connection = new SqlConnection(_configuration.GetConnectionString("RubiesConnectionString")))

            {
                using (var command = new SqlCommand("ASP_PickSortListDS", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }



        private void barButtonItem8_ItemClick(object sender, ItemClickEventArgs e)
        {

            var gridView = gridControl1.FocusedView as FileExistenceGridView;

            if (gridView.SelectedRowsCount == 0)
            {
                XtraMessageBox.Show("Please select one or more rows");
                return;
            }


            var selectedRowHandles = gridView.GetSelectedRows();
            var salesOrderReferences = new List<string>();

            foreach (var rowHandle in selectedRowHandles)
            {
                var salesOrderReference = gridView.GetRowCellValue(rowHandle, "AccountingRef").ToString();
                salesOrderReferences.Add(salesOrderReference);
            }

            CancelOrder(salesOrderReferences);
            // Refresh the GridView
            XtraMessageBox.Show(
                "These orders has been moved to the Hold Tab.");

            // Fetch the updated data from the database using the new EF Core method
            var data = _context.DSOrderDatas.ToList();

            // Set the fetched data as the grid's data source and refresh the grid view
            gridView.GridControl.DataSource = data;
            gridView.RefreshData();

        }

        private void CancelOrder(List<string> salesOrderReferences)
        {
            var connectionString = _configuration.GetConnectionString("RubiesConnectionString");

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();

                foreach (var salesOrderReference in salesOrderReferences)
                    using (var command = new SqlCommand("dbo.ASP_CANCEL", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;

                        // Assuming the parameter name is @SalesOrderReference in your stored procedure
                        command.Parameters.AddWithValue("@SalesOrderReference", salesOrderReference);

                        command.ExecuteNonQuery();
                    }
            }
        }

        // DS AustPost Label Queue Events (buttons 12, 13, 14)
        //Create Batch - DS AustPost
        private void barButtonItem12_ItemClick(object sender, ItemClickEventArgs e)
        {
            var tableName = "LabelstoPrintAustPostDS";
            var manager = new LabelQueueManager(tableName, _configuration);

            if (manager.ConfirmTruncate())
            {
                manager.TruncateTable();
                var gridView = gridControl1.FocusedView as FileExistenceGridView;

                // Use the shared validation method for AustPost batch (excludes FPP)
                if (!gridView.ValidateForAustPostBatch())
                {
                    manager.CloseConnection();
                    return;
                }

                var columnMappings = new Dictionary<string, string>
                {
                    { "AccountingRef", "SalesOrder" },
                    { "TradingRef", "OrderNumber" },
                    { "CustomerCode", "CustomerCode" },
                    { "EntryDateTime", "Date" }
                };

                string[] parameterNames = { "@column1", "@column2", "@column3", "@column4" };

                if (!CheckZShipmentID(gridView))
                    if (XtraMessageBox.Show(
                            "This record does not have a ShipmentID and will not generate a label. Are you sure you wish to continue?",
                            "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) != DialogResult.Yes)
                    {
                        manager.CloseConnection();
                        return;
                    }

                manager.InsertData(gridView, columnMappings, parameterNames);
                var rowCount = gridView.GetSelectedRows().Length;
                manager.ShowRowCountMessage(rowCount);
            }

            manager.CloseConnection();
        }

        //Show Batch Form - DS AustPost
        private void barButtonItem13_ItemClick(object sender, ItemClickEventArgs e)
        {
            var newForm = new BatchForm(_configuration, _context);
            newForm.Show();
        }

        //Process Batch - DS AustPost
        private void barButtonItem14_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                // create an SQL connection
                var connectionString = _configuration.GetConnectionString("RubiesConnectionString");

                using (var conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    var sql = "SELECT COUNT(*) FROM LabelstoPrintAustPostDS";
                    var cmd = new SqlCommand(sql, conn);
                    var rowCount = (int)cmd.ExecuteScalar();

                    if (rowCount > 0)
                    {
                        // Show a message box asking the user if they want to continue
                        var result = XtraMessageBox.Show(
                            "Are you sure you want to run the DS AustPost job and download " + rowCount + " labels?",
                            "Confirm DS AustPost Job Run", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                        // If the user clicks Yes, continue with the operation
                        if (result == DialogResult.Yes)
                        {
                            var jobRunner = new SqlAgentJobRunner("HVSERVER02\\ABM", "msdb", "LabelPrintDSAustPost");
                            jobRunner.RunJob();

                            // Show the row count in a message box
                            XtraMessageBox.Show("DS AustPost job started successfully! Number of labels queued: " + rowCount);
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Warning: The DS AustPost Queue does not contain any rows!");
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"Error starting DS AustPost job: {ex.Message}");
            }
        }

        // DS StarTrack Label Queue Events (buttons 15, 16, 17)
        //Create Batch - DS StarTrack
        private void barButtonItem15_ItemClick(object sender, ItemClickEventArgs e)
        {
            var tableName = "LabelstoPrintStarTrackDS";
            var manager = new LabelQueueManager(tableName, _configuration);

            if (manager.ConfirmTruncate())
            {
                manager.TruncateTable();
                var gridView = gridControl1.FocusedView as FileExistenceGridView;

                // Use the shared validation method for StarTrack batch (excludes 7C55)
                if (!gridView.ValidateForStarTrackBatch())
                {
                    manager.CloseConnection();
                    return;
                }

                var columnMappings = new Dictionary<string, string>
                {
                    { "AccountingRef", "SalesOrder" },
                    { "TradingRef", "OrderNumber" },
                    { "CustomerCode", "CustomerCode" },
                    { "EntryDateTime", "Date" }
                };

                string[] parameterNames = { "@column1", "@column2", "@column3", "@column4" };

                if (!CheckZShipmentID(gridView))
                    if (XtraMessageBox.Show(
                            "This record does not have a ShipmentID and will not generate a label. Are you sure you wish to continue?",
                            "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) != DialogResult.Yes)
                    {
                        manager.CloseConnection();
                        return;
                    }

                manager.InsertData(gridView, columnMappings, parameterNames);
                var rowCount = gridView.GetSelectedRows().Length;
                manager.ShowRowCountMessage(rowCount);
            }

            manager.CloseConnection();
        }

        //Show Batch Form - DS StarTrack
        private void barButtonItem16_ItemClick(object sender, ItemClickEventArgs e)
        {
            var newForm = new BatchForm(_configuration, _context);
            newForm.Show();
        }

        //Process Batch - DS StarTrack
        private void barButtonItem17_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                // create an SQL connection
                var connectionString = _configuration.GetConnectionString("RubiesConnectionString");

                using (var conn = new SqlConnection(connectionString))
                {
                    conn.Open();

                    var sql = "SELECT COUNT(*) FROM LabelstoPrintStarTrackDS";
                    var cmd = new SqlCommand(sql, conn);
                    var rowCount = (int)cmd.ExecuteScalar();

                    if (rowCount > 0)
                    {
                        // Show a message box asking the user if they want to continue
                        var result = XtraMessageBox.Show(
                            "Are you sure you want to run the DS StarTrack job and download " + rowCount + " labels?",
                            "Confirm DS StarTrack Job Run", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                        // If the user clicks Yes, continue with the operation
                        if (result == DialogResult.Yes)
                        {
                            var jobRunner = new SqlAgentJobRunner("HVSERVER02\\ABM", "msdb", "LabelPrintStarTrackDS");
                            jobRunner.RunJob();

                            // Show the row count in a message box
                            XtraMessageBox.Show("DS StarTrack job started successfully! Number of labels queued: " + rowCount);
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Warning: The DS StarTrack Queue does not contain any rows!");
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show($"Error starting DS StarTrack job: {ex.Message}");
            }
        }
    }
}